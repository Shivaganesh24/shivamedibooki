/**
 * @fileoverview Firestore Security Rules for MediBook Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all personal data, ensuring that only authenticated users can access their own information. Doctor profiles are public.
 *
 * Data Structure:
 * - User profiles and associated data (appointments, health quizzes, triage recommendations, report analyses) are nested under `/users/{userId}`.
 * - Doctor profiles are stored in the top-level `/doctors` collection.
 *
 * Key Security Decisions:
 * - User data is strictly private and accessible only to the owning user.
 * - Doctor profiles are publicly readable.
 * - List operations are secured via path-based ownership where applicable.
 *
 * Denormalization for Authorization:
 * - The `userId` is used in the path for all user-related collections to enforce ownership without needing `get()` calls.
 *
 * Structural Segregation:
 * - User data and public doctor data are stored in separate collections to simplify access control and improve performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if the authenticated user is the existing owner of the document
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Access control for user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (get, update, delete) - User 'user_abc' can read, update, and delete their profile if request.auth.uid == 'user_abc'.
     * @deny (create) - User 'user_xyz' cannot create a profile with ID 'user_abc'.
     * @deny (get, update, delete) - User 'user_xyz' cannot read, update, or delete the profile of 'user_abc'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Access control for appointments. Only the authenticated user can read and write their own appointments.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) - User 'user_abc' can create an appointment under their profile.
     * @allow (get, list, update, delete) - User 'user_abc' can manage their own appointments.
     * @deny (create) - User 'user_xyz' cannot create an appointment under 'user_abc''s profile.
     * @deny (get, list, update, delete) - User 'user_xyz' cannot access 'user_abc''s appointments.
     * @principle Enforces document ownership for all operations on appointments.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Access control for doctor profiles. Doctor profiles are publicly readable but not writable via the client.
     * @path /doctors/{doctorId}
     * @allow (get, list) - Any user can read doctor profiles.
     * @deny (create, update, delete) - No user can create, update, or delete doctor profiles through the client.
     * @principle Allows public read access for doctor profiles.
     */
    match /doctors/{doctorId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Access control for health quizzes. Only the authenticated user can read and write their own health quizzes.
     * @path /users/{userId}/healthQuizzes/{healthQuizId}
     * @allow (create) - User 'user_abc' can create a health quiz result under their profile.
     * @allow (get, list, update, delete) - User 'user_abc' can manage their own health quiz results.
     * @deny (create) - User 'user_xyz' cannot create a health quiz result under 'user_abc''s profile.
     * @deny (get, list, update, delete) - User 'user_xyz' cannot access 'user_abc''s health quiz results.
     * @principle Enforces document ownership for all operations on health quizzes.
     */
    match /users/{userId}/healthQuizzes/{healthQuizId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Access control for triage recommendations. Only the authenticated user can read and write their own triage recommendations.
     * @path /users/{userId}/triageRecommendations/{triageRecommendationId}
     * @allow (create) - User 'user_abc' can create a triage recommendation under their profile.
     * @allow (get, list, update, delete) - User 'user_abc' can manage their own triage recommendations.
     * @deny (create) - User 'user_xyz' cannot create a triage recommendation under 'user_abc''s profile.
     * @deny (get, list, update, delete) - User 'user_xyz' cannot access 'user_abc''s triage recommendations.
     * @principle Enforces document ownership for all operations on triage recommendations.
     */
    match /users/{userId}/triageRecommendations/{triageRecommendationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Access control for report analyses. Only the authenticated user can read and write their own report analyses.
     * @path /users/{userId}/reportAnalyses/{reportAnalysisId}
     * @allow (create) - User 'user_abc' can create a report analysis under their profile.
     * @allow (get, list, update, delete) - User 'user_abc' can manage their own report analyses.
     * @deny (create) - User 'user_xyz' cannot create a report analysis under 'user_abc''s profile.
     * @deny (get, list, update, delete) - User 'user_xyz' cannot access 'user_abc''s report analyses.
     * @principle Enforces document ownership for all operations on report analyses.
     */
    match /users/{userId}/reportAnalyses/{reportAnalysisId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}