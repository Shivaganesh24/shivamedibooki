{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the MediBook application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user."
        }
      },
      "required": [
        "id",
        "email",
        "firstName",
        "lastName"
      ]
    },
    "Appointment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Appointment",
      "type": "object",
      "description": "Represents an appointment booked by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Appointment entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Appointment)"
        },
        "doctorId": {
          "type": "string",
          "description": "Reference to Doctor. (Relationship: Doctor 1:N Appointment)"
        },
        "appointmentDate": {
          "type": "string",
          "description": "Date and time of the appointment.",
          "format": "date-time"
        },
        "reason": {
          "type": "string",
          "description": "Reason for the appointment."
        }
      },
      "required": [
        "id",
        "userId",
        "doctorId",
        "appointmentDate",
        "reason"
      ]
    },
    "Doctor": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Doctor",
      "type": "object",
      "description": "Represents a doctor available for appointments.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Doctor entity."
        },
        "firstName": {
          "type": "string",
          "description": "First name of the doctor."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the doctor."
        },
        "specialty": {
          "type": "string",
          "description": "Specialty of the doctor."
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "specialty"
      ]
    },
    "HealthQuiz": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "HealthQuiz",
      "type": "object",
      "description": "Represents a health quiz taken by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the HealthQuiz entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N HealthQuiz)"
        },
        "score": {
          "type": "number",
          "description": "The score obtained by the user in the quiz."
        },
        "completionDate": {
          "type": "string",
          "description": "Date and time when the quiz was completed.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "score",
        "completionDate"
      ]
    },
    "TriageRecommendation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TriageRecommendation",
      "type": "object",
      "description": "Represents a triage recommendation generated by the AI.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the TriageRecommendation entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N TriageRecommendation)"
        },
        "severity": {
          "type": "string",
          "description": "Severity level of the triage recommendation."
        },
        "suggestedAction": {
          "type": "string",
          "description": "Suggested action based on the triage."
        },
        "summary": {
          "type": "string",
          "description": "Summary of the triage recommendation."
        }
      },
      "required": [
        "id",
        "userId",
        "severity",
        "suggestedAction",
        "summary"
      ]
    },
    "ReportAnalysis": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ReportAnalysis",
      "type": "object",
      "description": "Represents the analysis of a medical report.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ReportAnalysis entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N ReportAnalysis)"
        },
        "reportName": {
          "type": "string",
          "description": "The name of the report."
        },
        "keyFindings": {
          "type": "string",
          "description": "Key findings extracted from the medical report."
        },
        "uploadDate": {
          "type": "string",
          "description": "Date and time when the report was uploaded.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "reportName",
        "keyFindings",
        "uploadDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles.  Path-based ownership ensures only the authenticated user can access their profile.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/appointments/{appointmentId}",
        "definition": {
          "entityName": "Appointment",
          "schema": {
            "$ref": "#/backend/entities/Appointment"
          },
          "description": "Stores appointments booked by users. Path-based ownership ensures only the authenticated user can access their appointments.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "appointmentId",
              "description": "The unique identifier of the appointment."
            }
          ]
        }
      },
      {
        "path": "/doctors/{doctorId}",
        "definition": {
          "entityName": "Doctor",
          "schema": {
            "$ref": "#/backend/entities/Doctor"
          },
          "description": "Stores doctor profiles. Doctor profiles are generally public.",
          "params": [
            {
              "name": "doctorId",
              "description": "The unique identifier of the doctor."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/healthQuizzes/{healthQuizId}",
        "definition": {
          "entityName": "HealthQuiz",
          "schema": {
            "$ref": "#/backend/entities/HealthQuiz"
          },
          "description": "Stores health quizzes taken by users. Path-based ownership ensures only the authenticated user can access their quiz results.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "healthQuizId",
              "description": "The unique identifier of the health quiz."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/triageRecommendations/{triageRecommendationId}",
        "definition": {
          "entityName": "TriageRecommendation",
          "schema": {
            "$ref": "#/backend/entities/TriageRecommendation"
          },
          "description": "Stores triage recommendations generated for users. Path-based ownership ensures only the authenticated user can access their recommendations.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "triageRecommendationId",
              "description": "The unique identifier of the triage recommendation."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/reportAnalyses/{reportAnalysisId}",
        "definition": {
          "entityName": "ReportAnalysis",
          "schema": {
            "$ref": "#/backend/entities/ReportAnalysis"
          },
          "description": "Stores report analyses generated for users. Path-based ownership ensures only the authenticated user can access their report analyses.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "reportAnalysisId",
              "description": "The unique identifier of the report analysis."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure security, scalability, and debuggability, adhering to the principles of Authorization Independence, Clarity of Intent, DBAC, and QAPs. User data and related entities (Appointments, HealthQuizzes, TriageRecommendations, and ReportAnalyses) are organized under `/users/{userId}` to leverage path-based ownership, simplifying security rules and ensuring that only the authenticated user can access their own data.  Doctors are stored in a separate `/doctors` collection, and while appointments reference doctors, access to doctor information is generally public.  This design avoids hierarchical authorization dependencies, as access control is primarily based on the authenticated `userId` and denormalized membership where necessary (although membership isn't explicitly used here).  This facilitates atomic operations and simplifies debugging.  Each collection is designed to contain documents with homogeneous security postures, improving the clarity of security rules. Path-based ownership for user data ensures secure `list` operations (QAPs). Timestamps, ownership, and denormalized data invariants can be easily enforced in security rules."
  }
}